// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.30.0
// 	protoc        v3.9.0
// source: message.proto

package grpc

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type MessageEntity_MessageType int32

const (
	MessageEntity_TERMINATE_MESSAGE                       MessageEntity_MessageType = 0  // Terminating run message
	MessageEntity_VOTE                                    MessageEntity_MessageType = 1  // Voting message type
	MessageEntity_SLOTS_ALLOCATION                        MessageEntity_MessageType = 2  // Slot assignment message type
	MessageEntity_NODE_SLOTS                              MessageEntity_MessageType = 3  // Slots for which the node is responsible
	MessageEntity_SLOTS_REPLICA_ALLOCATION                MessageEntity_MessageType = 4  // Slot copy assignment message type
	MessageEntity_NODE_SLOTS_REPLICAS                     MessageEntity_MessageType = 5  // A copy of the slot for which the node is responsible
	MessageEntity_REPLICA_NODE_ID                         MessageEntity_MessageType = 6  // Replica node id
	MessageEntity_REPLICA_REGISTER                        MessageEntity_MessageType = 7  // Register to request a forward copy
	MessageEntity_REPLICA_HEARTBEAT                       MessageEntity_MessageType = 8  // Heartbeat request forward replica
	MessageEntity_REPLICA_NODE_IDS                        MessageEntity_MessageType = 9  // Replica node id collection
	MessageEntity_CONTROLLER_NODE_ID                      MessageEntity_MessageType = 10 // Replica node id
	MessageEntity_CHANGE_REPLICA_TO_SLOTS                 MessageEntity_MessageType = 11
	MessageEntity_REFRESH_REPLICA_NODE_ID                 MessageEntity_MessageType = 12  // Refresh the replica node id
	MessageEntity_REFRESH_REPLICA_SLOTS                   MessageEntity_MessageType = 13  // Refresh the slot copy data
	MessageEntity_REQUEST_SLOTS_DATA                      MessageEntity_MessageType = 14  // Request slot data synchronization
	MessageEntity_UPDATE_NODE_SLOTS                       MessageEntity_MessageType = 15  // Slots for which the node is responsible
	MessageEntity_UPDATE_REPLICA_NODE_ID                  MessageEntity_MessageType = 16  // Update the replica node id
	MessageEntity_TRANSFER_SLOTS                          MessageEntity_MessageType = 17  // Transfer slot data to slots
	MessageEntity_UPDATE_SLOTS                            MessageEntity_MessageType = 18  // Transfer slot data to slots
	MessageEntity_CLIENT_FETCH_SLOTS_ALLOCATION           MessageEntity_MessageType = 101 // Pull the slots allocation data request
	MessageEntity_CLIENT_FETCH_SERVER_ADDRESSES           MessageEntity_MessageType = 102 // Pull the server node address list request
	MessageEntity_CLIENT_REGISTER                         MessageEntity_MessageType = 103 // Client registration request
	MessageEntity_CLIENT_HEARTBEAT                        MessageEntity_MessageType = 104 // Client heartbeat request
	MessageEntity_CLIENT_FETCH_SERVER_NODE_ID             MessageEntity_MessageType = 105 // Pull server node id
	MessageEntity_CLIENT_SUBSCRIBE                        MessageEntity_MessageType = 106 // Subscribe service
	MessageEntity_CLIENT_SERVICE_CHANGED                  MessageEntity_MessageType = 107 // Service instance changed
	MessageEntity_CLIENT_FETCH_SERVICE_REGISTER_ADDRESSES MessageEntity_MessageType = 108 // Fetch all service register addresses
)

// Enum value maps for MessageEntity_MessageType.
var (
	MessageEntity_MessageType_name = map[int32]string{
		0:   "TERMINATE_MESSAGE",
		1:   "VOTE",
		2:   "SLOTS_ALLOCATION",
		3:   "NODE_SLOTS",
		4:   "SLOTS_REPLICA_ALLOCATION",
		5:   "NODE_SLOTS_REPLICAS",
		6:   "REPLICA_NODE_ID",
		7:   "REPLICA_REGISTER",
		8:   "REPLICA_HEARTBEAT",
		9:   "REPLICA_NODE_IDS",
		10:  "CONTROLLER_NODE_ID",
		11:  "CHANGE_REPLICA_TO_SLOTS",
		12:  "REFRESH_REPLICA_NODE_ID",
		13:  "REFRESH_REPLICA_SLOTS",
		14:  "REQUEST_SLOTS_DATA",
		15:  "UPDATE_NODE_SLOTS",
		16:  "UPDATE_REPLICA_NODE_ID",
		17:  "TRANSFER_SLOTS",
		18:  "UPDATE_SLOTS",
		101: "CLIENT_FETCH_SLOTS_ALLOCATION",
		102: "CLIENT_FETCH_SERVER_ADDRESSES",
		103: "CLIENT_REGISTER",
		104: "CLIENT_HEARTBEAT",
		105: "CLIENT_FETCH_SERVER_NODE_ID",
		106: "CLIENT_SUBSCRIBE",
		107: "CLIENT_SERVICE_CHANGED",
		108: "CLIENT_FETCH_SERVICE_REGISTER_ADDRESSES",
	}
	MessageEntity_MessageType_value = map[string]int32{
		"TERMINATE_MESSAGE":                       0,
		"VOTE":                                    1,
		"SLOTS_ALLOCATION":                        2,
		"NODE_SLOTS":                              3,
		"SLOTS_REPLICA_ALLOCATION":                4,
		"NODE_SLOTS_REPLICAS":                     5,
		"REPLICA_NODE_ID":                         6,
		"REPLICA_REGISTER":                        7,
		"REPLICA_HEARTBEAT":                       8,
		"REPLICA_NODE_IDS":                        9,
		"CONTROLLER_NODE_ID":                      10,
		"CHANGE_REPLICA_TO_SLOTS":                 11,
		"REFRESH_REPLICA_NODE_ID":                 12,
		"REFRESH_REPLICA_SLOTS":                   13,
		"REQUEST_SLOTS_DATA":                      14,
		"UPDATE_NODE_SLOTS":                       15,
		"UPDATE_REPLICA_NODE_ID":                  16,
		"TRANSFER_SLOTS":                          17,
		"UPDATE_SLOTS":                            18,
		"CLIENT_FETCH_SLOTS_ALLOCATION":           101,
		"CLIENT_FETCH_SERVER_ADDRESSES":           102,
		"CLIENT_REGISTER":                         103,
		"CLIENT_HEARTBEAT":                        104,
		"CLIENT_FETCH_SERVER_NODE_ID":             105,
		"CLIENT_SUBSCRIBE":                        106,
		"CLIENT_SERVICE_CHANGED":                  107,
		"CLIENT_FETCH_SERVICE_REGISTER_ADDRESSES": 108,
	}
)

func (x MessageEntity_MessageType) Enum() *MessageEntity_MessageType {
	p := new(MessageEntity_MessageType)
	*p = x
	return p
}

func (x MessageEntity_MessageType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageEntity_MessageType) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[0].Descriptor()
}

func (MessageEntity_MessageType) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[0]
}

func (x MessageEntity_MessageType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageEntity_MessageType.Descriptor instead.
func (MessageEntity_MessageType) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2, 0}
}

type MessageResponse_ResponseCode int32

const (
	MessageResponse_SUCCESS          MessageResponse_ResponseCode = 0
	MessageResponse_SYSTEM_FAIL      MessageResponse_ResponseCode = 100001
	MessageResponse_REGISTER_SUCCESS MessageResponse_ResponseCode = 100100
	MessageResponse_REGISTER_FAILURE MessageResponse_ResponseCode = 100101
)

// Enum value maps for MessageResponse_ResponseCode.
var (
	MessageResponse_ResponseCode_name = map[int32]string{
		0:      "SUCCESS",
		100001: "SYSTEM_FAIL",
		100100: "REGISTER_SUCCESS",
		100101: "REGISTER_FAILURE",
	}
	MessageResponse_ResponseCode_value = map[string]int32{
		"SUCCESS":          0,
		"SYSTEM_FAIL":      100001,
		"REGISTER_SUCCESS": 100100,
		"REGISTER_FAILURE": 100101,
	}
)

func (x MessageResponse_ResponseCode) Enum() *MessageResponse_ResponseCode {
	p := new(MessageResponse_ResponseCode)
	*p = x
	return p
}

func (x MessageResponse_ResponseCode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (MessageResponse_ResponseCode) Descriptor() protoreflect.EnumDescriptor {
	return file_message_proto_enumTypes[1].Descriptor()
}

func (MessageResponse_ResponseCode) Type() protoreflect.EnumType {
	return &file_message_proto_enumTypes[1]
}

func (x MessageResponse_ResponseCode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use MessageResponse_ResponseCode.Descriptor instead.
func (MessageResponse_ResponseCode) EnumDescriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3, 0}
}

type RemoteServerNodeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    int32             `protobuf:"varint,1,opt,name=code,proto3" json:"code,omitempty"`
	Success bool              `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message string            `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Data    *RemoteServerNode `protobuf:"bytes,4,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *RemoteServerNodeResponse) Reset() {
	*x = RemoteServerNodeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteServerNodeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteServerNodeResponse) ProtoMessage() {}

func (x *RemoteServerNodeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteServerNodeResponse.ProtoReflect.Descriptor instead.
func (*RemoteServerNodeResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{0}
}

func (x *RemoteServerNodeResponse) GetCode() int32 {
	if x != nil {
		return x.Code
	}
	return 0
}

func (x *RemoteServerNodeResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *RemoteServerNodeResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *RemoteServerNodeResponse) GetData() *RemoteServerNode {
	if x != nil {
		return x.Data
	}
	return nil
}

// remote server node data
type RemoteServerNode struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	NodeId                int32  `protobuf:"varint,1,opt,name=nodeId,proto3" json:"nodeId,omitempty"`                               // node id
	IsControllerCandidate bool   `protobuf:"varint,2,opt,name=isControllerCandidate,proto3" json:"isControllerCandidate,omitempty"` // Whether it is a controller candidate node
	IsController          bool   `protobuf:"varint,3,opt,name=isController,proto3" json:"isController,omitempty"`                   // Whether you are a controller
	Ip                    string `protobuf:"bytes,4,opt,name=ip,proto3" json:"ip,omitempty"`                                        // ip address of the node
	ClientPort            int32  `protobuf:"varint,5,opt,name=clientPort,proto3" json:"clientPort,omitempty"`                       // Port number of the client
	InternPort            int32  `protobuf:"varint,6,opt,name=InternPort,proto3" json:"InternPort,omitempty"`                       // TCP port number for intra-node communication
}

func (x *RemoteServerNode) Reset() {
	*x = RemoteServerNode{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RemoteServerNode) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RemoteServerNode) ProtoMessage() {}

func (x *RemoteServerNode) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RemoteServerNode.ProtoReflect.Descriptor instead.
func (*RemoteServerNode) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{1}
}

func (x *RemoteServerNode) GetNodeId() int32 {
	if x != nil {
		return x.NodeId
	}
	return 0
}

func (x *RemoteServerNode) GetIsControllerCandidate() bool {
	if x != nil {
		return x.IsControllerCandidate
	}
	return false
}

func (x *RemoteServerNode) GetIsController() bool {
	if x != nil {
		return x.IsController
	}
	return false
}

func (x *RemoteServerNode) GetIp() string {
	if x != nil {
		return x.Ip
	}
	return ""
}

func (x *RemoteServerNode) GetClientPort() int32 {
	if x != nil {
		return x.ClientPort
	}
	return 0
}

func (x *RemoteServerNode) GetInternPort() int32 {
	if x != nil {
		return x.InternPort
	}
	return 0
}

type MessageEntity struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	RequestId string                    `protobuf:"bytes,1,opt,name=requestId,proto3" json:"requestId,omitempty"`
	Type      MessageEntity_MessageType `protobuf:"varint,2,opt,name=type,proto3,enum=proto.MessageEntity_MessageType" json:"type,omitempty"`
	Data      []byte                    `protobuf:"bytes,3,opt,name=data,proto3" json:"data,omitempty"`
}

func (x *MessageEntity) Reset() {
	*x = MessageEntity{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageEntity) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageEntity) ProtoMessage() {}

func (x *MessageEntity) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageEntity.ProtoReflect.Descriptor instead.
func (*MessageEntity) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{2}
}

func (x *MessageEntity) GetRequestId() string {
	if x != nil {
		return x.RequestId
	}
	return ""
}

func (x *MessageEntity) GetType() MessageEntity_MessageType {
	if x != nil {
		return x.Type
	}
	return MessageEntity_TERMINATE_MESSAGE
}

func (x *MessageEntity) GetData() []byte {
	if x != nil {
		return x.Data
	}
	return nil
}

type MessageResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Code    MessageResponse_ResponseCode `protobuf:"varint,1,opt,name=code,proto3,enum=proto.MessageResponse_ResponseCode" json:"code,omitempty"`
	Success bool                         `protobuf:"varint,2,opt,name=success,proto3" json:"success,omitempty"`
	Message string                       `protobuf:"bytes,3,opt,name=message,proto3" json:"message,omitempty"`
	Result  *MessageEntity               `protobuf:"bytes,4,opt,name=result,proto3" json:"result,omitempty"`
}

func (x *MessageResponse) Reset() {
	*x = MessageResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MessageResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MessageResponse) ProtoMessage() {}

func (x *MessageResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MessageResponse.ProtoReflect.Descriptor instead.
func (*MessageResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{3}
}

func (x *MessageResponse) GetCode() MessageResponse_ResponseCode {
	if x != nil {
		return x.Code
	}
	return MessageResponse_SUCCESS
}

func (x *MessageResponse) GetSuccess() bool {
	if x != nil {
		return x.Success
	}
	return false
}

func (x *MessageResponse) GetMessage() string {
	if x != nil {
		return x.Message
	}
	return ""
}

func (x *MessageResponse) GetResult() *MessageEntity {
	if x != nil {
		return x.Result
	}
	return nil
}

type ControllerVote struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoterNodeId      int32 `protobuf:"varint,1,opt,name=voterNodeId,proto3" json:"voterNodeId,omitempty"`           // Voting node id
	ControllerNodeId int32 `protobuf:"varint,2,opt,name=controllerNodeId,proto3" json:"controllerNodeId,omitempty"` // id of the controller voted for
	VoteRound        int32 `protobuf:"varint,3,opt,name=voteRound,proto3" json:"voteRound,omitempty"`               // The rotation of the vote
}

func (x *ControllerVote) Reset() {
	*x = ControllerVote{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ControllerVote) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ControllerVote) ProtoMessage() {}

func (x *ControllerVote) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ControllerVote.ProtoReflect.Descriptor instead.
func (*ControllerVote) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{4}
}

func (x *ControllerVote) GetVoterNodeId() int32 {
	if x != nil {
		return x.VoterNodeId
	}
	return 0
}

func (x *ControllerVote) GetControllerNodeId() int32 {
	if x != nil {
		return x.ControllerNodeId
	}
	return 0
}

func (x *ControllerVote) GetVoteRound() int32 {
	if x != nil {
		return x.VoteRound
	}
	return 0
}

type RegisterRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName         string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceInstanceIp   string `protobuf:"bytes,2,opt,name=serviceInstanceIp,proto3" json:"serviceInstanceIp,omitempty"`
	ServiceInstancePort int32  `protobuf:"varint,3,opt,name=serviceInstancePort,proto3" json:"serviceInstancePort,omitempty"`
}

func (x *RegisterRequest) Reset() {
	*x = RegisterRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RegisterRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RegisterRequest) ProtoMessage() {}

func (x *RegisterRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RegisterRequest.ProtoReflect.Descriptor instead.
func (*RegisterRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{5}
}

func (x *RegisterRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *RegisterRequest) GetServiceInstanceIp() string {
	if x != nil {
		return x.ServiceInstanceIp
	}
	return ""
}

func (x *RegisterRequest) GetServiceInstancePort() int32 {
	if x != nil {
		return x.ServiceInstancePort
	}
	return 0
}

type HeartbeatRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName         string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceInstanceIp   string `protobuf:"bytes,2,opt,name=serviceInstanceIp,proto3" json:"serviceInstanceIp,omitempty"`
	ServiceInstancePort int32  `protobuf:"varint,3,opt,name=serviceInstancePort,proto3" json:"serviceInstancePort,omitempty"`
}

func (x *HeartbeatRequest) Reset() {
	*x = HeartbeatRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *HeartbeatRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*HeartbeatRequest) ProtoMessage() {}

func (x *HeartbeatRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use HeartbeatRequest.ProtoReflect.Descriptor instead.
func (*HeartbeatRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{6}
}

func (x *HeartbeatRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *HeartbeatRequest) GetServiceInstanceIp() string {
	if x != nil {
		return x.ServiceInstanceIp
	}
	return ""
}

func (x *HeartbeatRequest) GetServiceInstancePort() int32 {
	if x != nil {
		return x.ServiceInstancePort
	}
	return 0
}

type FetchServerNodeIdResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerNodeId int32 `protobuf:"varint,1,opt,name=serverNodeId,proto3" json:"serverNodeId,omitempty"`
}

func (x *FetchServerNodeIdResponse) Reset() {
	*x = FetchServerNodeIdResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchServerNodeIdResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchServerNodeIdResponse) ProtoMessage() {}

func (x *FetchServerNodeIdResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchServerNodeIdResponse.ProtoReflect.Descriptor instead.
func (*FetchServerNodeIdResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{7}
}

func (x *FetchServerNodeIdResponse) GetServerNodeId() int32 {
	if x != nil {
		return x.ServerNodeId
	}
	return 0
}

type SubscribeRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
}

func (x *SubscribeRequest) Reset() {
	*x = SubscribeRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeRequest) ProtoMessage() {}

func (x *SubscribeRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeRequest.ProtoReflect.Descriptor instead.
func (*SubscribeRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{8}
}

func (x *SubscribeRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type SubscribeResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceInstanceAddresses []string `protobuf:"bytes,1,rep,name=serviceInstanceAddresses,proto3" json:"serviceInstanceAddresses,omitempty"`
}

func (x *SubscribeResponse) Reset() {
	*x = SubscribeResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SubscribeResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SubscribeResponse) ProtoMessage() {}

func (x *SubscribeResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SubscribeResponse.ProtoReflect.Descriptor instead.
func (*SubscribeResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{9}
}

func (x *SubscribeResponse) GetServiceInstanceAddresses() []string {
	if x != nil {
		return x.ServiceInstanceAddresses
	}
	return nil
}

type ServiceChangedRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName              string   `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceInstanceAddresses []string `protobuf:"bytes,2,rep,name=serviceInstanceAddresses,proto3" json:"serviceInstanceAddresses,omitempty"`
}

func (x *ServiceChangedRequest) Reset() {
	*x = ServiceChangedRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ServiceChangedRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ServiceChangedRequest) ProtoMessage() {}

func (x *ServiceChangedRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ServiceChangedRequest.ProtoReflect.Descriptor instead.
func (*ServiceChangedRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{10}
}

func (x *ServiceChangedRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *ServiceChangedRequest) GetServiceInstanceAddresses() []string {
	if x != nil {
		return x.ServiceInstanceAddresses
	}
	return nil
}

type FetchServerAddressesResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServerAddresses []string `protobuf:"bytes,1,rep,name=serverAddresses,proto3" json:"serverAddresses,omitempty"`
}

func (x *FetchServerAddressesResponse) Reset() {
	*x = FetchServerAddressesResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchServerAddressesResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchServerAddressesResponse) ProtoMessage() {}

func (x *FetchServerAddressesResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchServerAddressesResponse.ProtoReflect.Descriptor instead.
func (*FetchServerAddressesResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{11}
}

func (x *FetchServerAddressesResponse) GetServerAddresses() []string {
	if x != nil {
		return x.ServerAddresses
	}
	return nil
}

type TransferSlotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TargetNodeId int32  `protobuf:"varint,1,opt,name=targetNodeId,proto3" json:"targetNodeId,omitempty"`
	Slots        string `protobuf:"bytes,2,opt,name=slots,proto3" json:"slots,omitempty"`
}

func (x *TransferSlotsRequest) Reset() {
	*x = TransferSlotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *TransferSlotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TransferSlotsRequest) ProtoMessage() {}

func (x *TransferSlotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TransferSlotsRequest.ProtoReflect.Descriptor instead.
func (*TransferSlotsRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{12}
}

func (x *TransferSlotsRequest) GetTargetNodeId() int32 {
	if x != nil {
		return x.TargetNodeId
	}
	return 0
}

func (x *TransferSlotsRequest) GetSlots() string {
	if x != nil {
		return x.Slots
	}
	return ""
}

type UpdateSlotsRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SlotNo   int32  `protobuf:"varint,1,opt,name=slotNo,proto3" json:"slotNo,omitempty"`
	SlotData []byte `protobuf:"bytes,2,opt,name=slotData,proto3" json:"slotData,omitempty"`
}

func (x *UpdateSlotsRequest) Reset() {
	*x = UpdateSlotsRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UpdateSlotsRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UpdateSlotsRequest) ProtoMessage() {}

func (x *UpdateSlotsRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UpdateSlotsRequest.ProtoReflect.Descriptor instead.
func (*UpdateSlotsRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{13}
}

func (x *UpdateSlotsRequest) GetSlotNo() int32 {
	if x != nil {
		return x.SlotNo
	}
	return 0
}

func (x *UpdateSlotsRequest) GetSlotData() []byte {
	if x != nil {
		return x.SlotData
	}
	return nil
}

type FetchServiceRegisterInfoRequest struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
}

func (x *FetchServiceRegisterInfoRequest) Reset() {
	*x = FetchServiceRegisterInfoRequest{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchServiceRegisterInfoRequest) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchServiceRegisterInfoRequest) ProtoMessage() {}

func (x *FetchServiceRegisterInfoRequest) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchServiceRegisterInfoRequest.ProtoReflect.Descriptor instead.
func (*FetchServiceRegisterInfoRequest) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{14}
}

func (x *FetchServiceRegisterInfoRequest) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

type FetchServiceRegisterInfoResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Info []*FetchServiceRegisterInfo `protobuf:"bytes,1,rep,name=info,proto3" json:"info,omitempty"`
}

func (x *FetchServiceRegisterInfoResponse) Reset() {
	*x = FetchServiceRegisterInfoResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchServiceRegisterInfoResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchServiceRegisterInfoResponse) ProtoMessage() {}

func (x *FetchServiceRegisterInfoResponse) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchServiceRegisterInfoResponse.ProtoReflect.Descriptor instead.
func (*FetchServiceRegisterInfoResponse) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{15}
}

func (x *FetchServiceRegisterInfoResponse) GetInfo() []*FetchServiceRegisterInfo {
	if x != nil {
		return x.Info
	}
	return nil
}

type FetchServiceRegisterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ServiceName         string `protobuf:"bytes,1,opt,name=serviceName,proto3" json:"serviceName,omitempty"`
	ServiceInstanceIp   string `protobuf:"bytes,2,opt,name=serviceInstanceIp,proto3" json:"serviceInstanceIp,omitempty"`
	ServiceInstancePort int32  `protobuf:"varint,3,opt,name=serviceInstancePort,proto3" json:"serviceInstancePort,omitempty"`
	LatestHeartbeatTime int64  `protobuf:"varint,4,opt,name=latestHeartbeatTime,proto3" json:"latestHeartbeatTime,omitempty"`
}

func (x *FetchServiceRegisterInfo) Reset() {
	*x = FetchServiceRegisterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_message_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FetchServiceRegisterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FetchServiceRegisterInfo) ProtoMessage() {}

func (x *FetchServiceRegisterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_message_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FetchServiceRegisterInfo.ProtoReflect.Descriptor instead.
func (*FetchServiceRegisterInfo) Descriptor() ([]byte, []int) {
	return file_message_proto_rawDescGZIP(), []int{16}
}

func (x *FetchServiceRegisterInfo) GetServiceName() string {
	if x != nil {
		return x.ServiceName
	}
	return ""
}

func (x *FetchServiceRegisterInfo) GetServiceInstanceIp() string {
	if x != nil {
		return x.ServiceInstanceIp
	}
	return ""
}

func (x *FetchServiceRegisterInfo) GetServiceInstancePort() int32 {
	if x != nil {
		return x.ServiceInstancePort
	}
	return 0
}

func (x *FetchServiceRegisterInfo) GetLatestHeartbeatTime() int64 {
	if x != nil {
		return x.LatestHeartbeatTime
	}
	return 0
}

var File_message_proto protoreflect.FileDescriptor

var file_message_proto_rawDesc = []byte{
	0x0a, 0x0d, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12,
	0x05, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x22, 0x8f, 0x01, 0x0a, 0x18, 0x52, 0x65, 0x6d, 0x6f, 0x74,
	0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65,
	0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75, 0x63, 0x63, 0x65, 0x73,
	0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x2b, 0x0a, 0x04, 0x64,
	0x61, 0x74, 0x61, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x17, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f,
	0x64, 0x65, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xd4, 0x01, 0x0a, 0x10, 0x52, 0x65, 0x6d,
	0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x12, 0x16, 0x0a,
	0x06, 0x6e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x6e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72,
	0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c,
	0x65, 0x72, 0x43, 0x61, 0x6e, 0x64, 0x69, 0x64, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69,
	0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0c, 0x69, 0x73, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x12,
	0x0e, 0x0a, 0x02, 0x69, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x02, 0x69, 0x70, 0x12,
	0x1e, 0x0a, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x50, 0x6f, 0x72, 0x74, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0a, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x22,
	0xac, 0x06, 0x0a, 0x0d, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x09, 0x72, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x49, 0x64, 0x12,
	0x34, 0x0a, 0x04, 0x74, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e, 0x74,
	0x69, 0x74, 0x79, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x04, 0x74, 0x79, 0x70, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x64, 0x61, 0x74, 0x61, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x04, 0x64, 0x61, 0x74, 0x61, 0x22, 0xb2, 0x05, 0x0a, 0x0b, 0x4d, 0x65,
	0x73, 0x73, 0x61, 0x67, 0x65, 0x54, 0x79, 0x70, 0x65, 0x12, 0x15, 0x0a, 0x11, 0x54, 0x45, 0x52,
	0x4d, 0x49, 0x4e, 0x41, 0x54, 0x45, 0x5f, 0x4d, 0x45, 0x53, 0x53, 0x41, 0x47, 0x45, 0x10, 0x00,
	0x12, 0x08, 0x0a, 0x04, 0x56, 0x4f, 0x54, 0x45, 0x10, 0x01, 0x12, 0x14, 0x0a, 0x10, 0x53, 0x4c,
	0x4f, 0x54, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x02,
	0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x10, 0x03,
	0x12, 0x1c, 0x0a, 0x18, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43,
	0x41, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x04, 0x12, 0x17,
	0x0a, 0x13, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x53, 0x10, 0x05, 0x12, 0x13, 0x0a, 0x0f, 0x52, 0x45, 0x50, 0x4c, 0x49,
	0x43, 0x41, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x06, 0x12, 0x14, 0x0a, 0x10,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52,
	0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x48, 0x45,
	0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x08, 0x12, 0x14, 0x0a, 0x10, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x53, 0x10, 0x09, 0x12,
	0x16, 0x0a, 0x12, 0x43, 0x4f, 0x4e, 0x54, 0x52, 0x4f, 0x4c, 0x4c, 0x45, 0x52, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x0a, 0x12, 0x1b, 0x0a, 0x17, 0x43, 0x48, 0x41, 0x4e, 0x47,
	0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x54, 0x4f, 0x5f, 0x53, 0x4c, 0x4f,
	0x54, 0x53, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f,
	0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x10,
	0x0c, 0x12, 0x19, 0x0a, 0x15, 0x52, 0x45, 0x46, 0x52, 0x45, 0x53, 0x48, 0x5f, 0x52, 0x45, 0x50,
	0x4c, 0x49, 0x43, 0x41, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x10, 0x0d, 0x12, 0x16, 0x0a, 0x12,
	0x52, 0x45, 0x51, 0x55, 0x45, 0x53, 0x54, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x5f, 0x44, 0x41,
	0x54, 0x41, 0x10, 0x0e, 0x12, 0x15, 0x0a, 0x11, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x4e,
	0x4f, 0x44, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x10, 0x0f, 0x12, 0x1a, 0x0a, 0x16, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x52, 0x45, 0x50, 0x4c, 0x49, 0x43, 0x41, 0x5f, 0x4e, 0x4f,
	0x44, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x10, 0x12, 0x12, 0x0a, 0x0e, 0x54, 0x52, 0x41, 0x4e, 0x53,
	0x46, 0x45, 0x52, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x10, 0x11, 0x12, 0x10, 0x0a, 0x0c, 0x55,
	0x50, 0x44, 0x41, 0x54, 0x45, 0x5f, 0x53, 0x4c, 0x4f, 0x54, 0x53, 0x10, 0x12, 0x12, 0x21, 0x0a,
	0x1d, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x53, 0x4c,
	0x4f, 0x54, 0x53, 0x5f, 0x41, 0x4c, 0x4c, 0x4f, 0x43, 0x41, 0x54, 0x49, 0x4f, 0x4e, 0x10, 0x65,
	0x12, 0x21, 0x0a, 0x1d, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48,
	0x5f, 0x53, 0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45,
	0x53, 0x10, 0x66, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x52, 0x45,
	0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x10, 0x67, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x4c, 0x49, 0x45,
	0x4e, 0x54, 0x5f, 0x48, 0x45, 0x41, 0x52, 0x54, 0x42, 0x45, 0x41, 0x54, 0x10, 0x68, 0x12, 0x1f,
	0x0a, 0x1b, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x45, 0x54, 0x43, 0x48, 0x5f, 0x53,
	0x45, 0x52, 0x56, 0x45, 0x52, 0x5f, 0x4e, 0x4f, 0x44, 0x45, 0x5f, 0x49, 0x44, 0x10, 0x69, 0x12,
	0x14, 0x0a, 0x10, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x53, 0x55, 0x42, 0x53, 0x43, 0x52,
	0x49, 0x42, 0x45, 0x10, 0x6a, 0x12, 0x1a, 0x0a, 0x16, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f,
	0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x43, 0x48, 0x41, 0x4e, 0x47, 0x45, 0x44, 0x10,
	0x6b, 0x12, 0x2b, 0x0a, 0x27, 0x43, 0x4c, 0x49, 0x45, 0x4e, 0x54, 0x5f, 0x46, 0x45, 0x54, 0x43,
	0x48, 0x5f, 0x53, 0x45, 0x52, 0x56, 0x49, 0x43, 0x45, 0x5f, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54,
	0x45, 0x52, 0x5f, 0x41, 0x44, 0x44, 0x52, 0x45, 0x53, 0x53, 0x45, 0x53, 0x10, 0x6c, 0x22, 0x8c,
	0x02, 0x0a, 0x0f, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e,
	0x73, 0x65, 0x12, 0x37, 0x0a, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x23, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x2e, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73,
	0x65, 0x43, 0x6f, 0x64, 0x65, 0x52, 0x04, 0x63, 0x6f, 0x64, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x73,
	0x75, 0x63, 0x63, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x73, 0x75,
	0x63, 0x63, 0x65, 0x73, 0x73, 0x12, 0x18, 0x0a, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x6d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12,
	0x2c, 0x0a, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x14, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x52, 0x06, 0x72, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x22, 0x5e, 0x0a,
	0x0c, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53, 0x53, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0b, 0x53, 0x59,
	0x53, 0x54, 0x45, 0x4d, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x10, 0xa1, 0x8d, 0x06, 0x12, 0x16, 0x0a,
	0x10, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45, 0x52, 0x5f, 0x53, 0x55, 0x43, 0x43, 0x45, 0x53,
	0x53, 0x10, 0x84, 0x8e, 0x06, 0x12, 0x16, 0x0a, 0x10, 0x52, 0x45, 0x47, 0x49, 0x53, 0x54, 0x45,
	0x52, 0x5f, 0x46, 0x41, 0x49, 0x4c, 0x55, 0x52, 0x45, 0x10, 0x85, 0x8e, 0x06, 0x22, 0x7c, 0x0a,
	0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x56, 0x6f, 0x74, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x76, 0x6f, 0x74, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49,
	0x64, 0x12, 0x2a, 0x0a, 0x10, 0x63, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x10, 0x63, 0x6f, 0x6e,
	0x74, 0x72, 0x6f, 0x6c, 0x6c, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x09, 0x76, 0x6f, 0x74, 0x65, 0x52, 0x6f, 0x75, 0x6e, 0x64, 0x22, 0x93, 0x01, 0x0a, 0x0f,
	0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12,
	0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d,
	0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x12,
	0x30, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e,
	0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x72,
	0x74, 0x22, 0x94, 0x01, 0x0a, 0x10, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52,
	0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63,
	0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74,
	0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x22, 0x3f, 0x0a, 0x19, 0x46, 0x65, 0x74, 0x63,
	0x68, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x52, 0x65, 0x73,
	0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x22, 0x34, 0x0a, 0x10, 0x53, 0x75, 0x62,
	0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a,
	0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x22,
	0x4f, 0x0a, 0x11, 0x53, 0x75, 0x62, 0x73, 0x63, 0x72, 0x69, 0x62, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x18, 0x01, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49,
	0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73,
	0x22, 0x75, 0x0a, 0x15, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x43, 0x68, 0x61, 0x6e, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72,
	0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b,
	0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3a, 0x0a, 0x18, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x02, 0x20, 0x03, 0x28, 0x09, 0x52, 0x18, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x41, 0x64,
	0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x22, 0x48, 0x0a, 0x1c, 0x46, 0x65, 0x74, 0x63, 0x68,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x52,
	0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x28, 0x0a, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65, 0x73, 0x18, 0x01, 0x20, 0x03, 0x28, 0x09,
	0x52, 0x0f, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x65,
	0x73, 0x22, 0x50, 0x0a, 0x14, 0x54, 0x72, 0x61, 0x6e, 0x73, 0x66, 0x65, 0x72, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x61, 0x72,
	0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x0c, 0x74, 0x61, 0x72, 0x67, 0x65, 0x74, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x64, 0x12, 0x14, 0x0a,
	0x05, 0x73, 0x6c, 0x6f, 0x74, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x05, 0x73, 0x6c,
	0x6f, 0x74, 0x73, 0x22, 0x48, 0x0a, 0x12, 0x55, 0x70, 0x64, 0x61, 0x74, 0x65, 0x53, 0x6c, 0x6f,
	0x74, 0x73, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6c, 0x6f,
	0x74, 0x4e, 0x6f, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x06, 0x73, 0x6c, 0x6f, 0x74, 0x4e,
	0x6f, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0c, 0x52, 0x08, 0x73, 0x6c, 0x6f, 0x74, 0x44, 0x61, 0x74, 0x61, 0x22, 0x43, 0x0a,
	0x1f, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67,
	0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65, 0x71, 0x75, 0x65, 0x73, 0x74,
	0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61,
	0x6d, 0x65, 0x22, 0x57, 0x0a, 0x20, 0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69,
	0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x65,
	0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x33, 0x0a, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x18, 0x01,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x46, 0x65, 0x74,
	0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65,
	0x72, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x04, 0x69, 0x6e, 0x66, 0x6f, 0x22, 0xce, 0x01, 0x0a, 0x18,
	0x46, 0x65, 0x74, 0x63, 0x68, 0x53, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x52, 0x65, 0x67, 0x69,
	0x73, 0x74, 0x65, 0x72, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x65,
	0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x49, 0x70, 0x12, 0x30, 0x0a, 0x13, 0x73, 0x65, 0x72, 0x76,
	0x69, 0x63, 0x65, 0x49, 0x6e, 0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x73, 0x65, 0x72, 0x76, 0x69, 0x63, 0x65, 0x49, 0x6e,
	0x73, 0x74, 0x61, 0x6e, 0x63, 0x65, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x6c, 0x61,
	0x74, 0x65, 0x73, 0x74, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x03, 0x52, 0x13, 0x6c, 0x61, 0x74, 0x65, 0x73, 0x74, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x32, 0x93, 0x01, 0x0a,
	0x07, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x4e, 0x6f, 0x64, 0x65, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x17, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f, 0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e,
	0x6f, 0x64, 0x65, 0x1a, 0x1f, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x52, 0x65, 0x6d, 0x6f,
	0x74, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x6f, 0x64, 0x65, 0x52, 0x65, 0x73, 0x70,
	0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x12, 0x3a, 0x0a, 0x04, 0x73, 0x65, 0x6e, 0x64, 0x12, 0x14,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73, 0x73, 0x61, 0x67, 0x65, 0x45, 0x6e,
	0x74, 0x69, 0x74, 0x79, 0x1a, 0x16, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x2e, 0x4d, 0x65, 0x73,
	0x73, 0x61, 0x67, 0x65, 0x52, 0x65, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x22, 0x00, 0x28, 0x01,
	0x30, 0x01, 0x42, 0x2d, 0x5a, 0x2b, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e, 0x63, 0x6f, 0x6d,
	0x2f, 0x4e, 0x65, 0x78, 0x74, 0x73, 0x75, 0x6d, 0x6d, 0x65, 0x72, 0x2f, 0x6d, 0x69, 0x63, 0x72,
	0x6f, 0x2d, 0x63, 0x6c, 0x69, 0x65, 0x6e, 0x74, 0x2f, 0x70, 0x6b, 0x67, 0x2f, 0x67, 0x72, 0x70,
	0x63, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_message_proto_rawDescOnce sync.Once
	file_message_proto_rawDescData = file_message_proto_rawDesc
)

func file_message_proto_rawDescGZIP() []byte {
	file_message_proto_rawDescOnce.Do(func() {
		file_message_proto_rawDescData = protoimpl.X.CompressGZIP(file_message_proto_rawDescData)
	})
	return file_message_proto_rawDescData
}

var file_message_proto_enumTypes = make([]protoimpl.EnumInfo, 2)
var file_message_proto_msgTypes = make([]protoimpl.MessageInfo, 17)
var file_message_proto_goTypes = []interface{}{
	(MessageEntity_MessageType)(0),           // 0: proto.MessageEntity.MessageType
	(MessageResponse_ResponseCode)(0),        // 1: proto.MessageResponse.ResponseCode
	(*RemoteServerNodeResponse)(nil),         // 2: proto.RemoteServerNodeResponse
	(*RemoteServerNode)(nil),                 // 3: proto.RemoteServerNode
	(*MessageEntity)(nil),                    // 4: proto.MessageEntity
	(*MessageResponse)(nil),                  // 5: proto.MessageResponse
	(*ControllerVote)(nil),                   // 6: proto.ControllerVote
	(*RegisterRequest)(nil),                  // 7: proto.RegisterRequest
	(*HeartbeatRequest)(nil),                 // 8: proto.HeartbeatRequest
	(*FetchServerNodeIdResponse)(nil),        // 9: proto.FetchServerNodeIdResponse
	(*SubscribeRequest)(nil),                 // 10: proto.SubscribeRequest
	(*SubscribeResponse)(nil),                // 11: proto.SubscribeResponse
	(*ServiceChangedRequest)(nil),            // 12: proto.ServiceChangedRequest
	(*FetchServerAddressesResponse)(nil),     // 13: proto.FetchServerAddressesResponse
	(*TransferSlotsRequest)(nil),             // 14: proto.TransferSlotsRequest
	(*UpdateSlotsRequest)(nil),               // 15: proto.UpdateSlotsRequest
	(*FetchServiceRegisterInfoRequest)(nil),  // 16: proto.FetchServiceRegisterInfoRequest
	(*FetchServiceRegisterInfoResponse)(nil), // 17: proto.FetchServiceRegisterInfoResponse
	(*FetchServiceRegisterInfo)(nil),         // 18: proto.FetchServiceRegisterInfo
}
var file_message_proto_depIdxs = []int32{
	3,  // 0: proto.RemoteServerNodeResponse.data:type_name -> proto.RemoteServerNode
	0,  // 1: proto.MessageEntity.type:type_name -> proto.MessageEntity.MessageType
	1,  // 2: proto.MessageResponse.code:type_name -> proto.MessageResponse.ResponseCode
	4,  // 3: proto.MessageResponse.result:type_name -> proto.MessageEntity
	18, // 4: proto.FetchServiceRegisterInfoResponse.info:type_name -> proto.FetchServiceRegisterInfo
	3,  // 5: proto.Message.RemoteNodeInfo:input_type -> proto.RemoteServerNode
	4,  // 6: proto.Message.send:input_type -> proto.MessageEntity
	2,  // 7: proto.Message.RemoteNodeInfo:output_type -> proto.RemoteServerNodeResponse
	5,  // 8: proto.Message.send:output_type -> proto.MessageResponse
	7,  // [7:9] is the sub-list for method output_type
	5,  // [5:7] is the sub-list for method input_type
	5,  // [5:5] is the sub-list for extension type_name
	5,  // [5:5] is the sub-list for extension extendee
	0,  // [0:5] is the sub-list for field type_name
}

func init() { file_message_proto_init() }
func file_message_proto_init() {
	if File_message_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_message_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteServerNodeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RemoteServerNode); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageEntity); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MessageResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ControllerVote); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RegisterRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*HeartbeatRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchServerNodeIdResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SubscribeResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ServiceChangedRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchServerAddressesResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*TransferSlotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UpdateSlotsRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchServiceRegisterInfoRequest); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchServiceRegisterInfoResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_message_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FetchServiceRegisterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_message_proto_rawDesc,
			NumEnums:      2,
			NumMessages:   17,
			NumExtensions: 0,
			NumServices:   1,
		},
		GoTypes:           file_message_proto_goTypes,
		DependencyIndexes: file_message_proto_depIdxs,
		EnumInfos:         file_message_proto_enumTypes,
		MessageInfos:      file_message_proto_msgTypes,
	}.Build()
	File_message_proto = out.File
	file_message_proto_rawDesc = nil
	file_message_proto_goTypes = nil
	file_message_proto_depIdxs = nil
}
